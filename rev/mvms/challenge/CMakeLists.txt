# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS cmake.toml)
endif()

# Options
option(LD_SHUFFLER "" OFF)

project(malta-rev-chall)

# Target: chall-base
add_library(chall-base INTERFACE)

target_compile_definitions(chall-base INTERFACE
	"OPCODES_PATH=\"${CMAKE_SOURCE_DIR}/program/opcodes.bin\""
	"PROGRAM_PATH=\"${CMAKE_SOURCE_DIR}/program/program.bin\""
)

if(CMAKE_BUILD_TYPE STREQUAL "Debug") # debug
	target_compile_definitions(chall-base INTERFACE
		_DEBUG
	)
endif()

if((NOT CMAKE_BUILD_TYPE STREQUAL "Debug")) # ndebug
	target_compile_definitions(chall-base INTERFACE
		NDEBUG
	)
endif()

target_compile_features(chall-base INTERFACE
	cxx_std_23
)

if((NOT CMAKE_BUILD_TYPE STREQUAL "Debug")) # ndebug
	target_compile_options(chall-base INTERFACE
		-O2
	)
endif()

if((NOT CMAKE_BUILD_TYPE STREQUAL "Debug") AND CMAKE_SYSTEM_NAME MATCHES "Linux") # linux_ndebug
	target_compile_options(chall-base INTERFACE
		-msse4.1
		-mno-avx
		-mno-avx2
		-mno-fma
		-fPIC
		-fno-exceptions
		-fno-rtti
		-fno-unwind-tables
		-fno-asynchronous-unwind-tables
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(chall-base INTERFACE
		-stdlib=libc++
		-Wno-c23-extensions
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Darwin") # macos
	target_link_directories(chall-base INTERFACE
		"/opt/homebrew/opt/llvm/lib/c++"
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_link_libraries(chall-base INTERFACE
		c++abi
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_link_libraries(chall-base INTERFACE
		c++
	)
endif()

target_link_options(chall-base INTERFACE
	-fuse-ld=ld
)

# Target: chall-objects
set(chall-objects_SOURCES
	cmake.toml
	"src/dummy.cpp"
	"src/main.cpp"
	"src/vm/vm.cpp"
)

add_library(chall-objects OBJECT)

target_sources(chall-objects PRIVATE ${chall-objects_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${chall-objects_SOURCES})

if((NOT CMAKE_BUILD_TYPE STREQUAL "Debug")) # ndebug
	target_compile_options(chall-objects PUBLIC
		-ffunction-sections
	)
endif()

target_include_directories(chall-objects PUBLIC
	"src/"
)

target_link_libraries(chall-objects PUBLIC
	chall-base
)

set(CMKR_TARGET chall-objects)
set(SHUFFLE_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/scripts/generate_ld.py)
set(LINKER_SCRIPT_TEMPLATE ${CMAKE_CURRENT_SOURCE_DIR}/linker.ld.template)
set(GENERATED_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/linker.ld)

find_package(Python3 COMPONENTS Interpreter REQUIRED)
set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})

if(LD_SHUFFLER)
    add_custom_command(
        OUTPUT ${GENERATED_LINKER_SCRIPT}
        COMMAND ${PYTHON_EXECUTABLE} ${SHUFFLE_SCRIPT}
                $<TARGET_OBJECTS:chall-objects>
        DEPENDS chall-objects
        COMMENT "Generating linker script: ${GENERATED_LINKER_SCRIPT}"
        VERBATIM
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )

    add_custom_target(linker-script ALL
        DEPENDS ${GENERATED_LINKER_SCRIPT}
    )
endif()

# Target: chall
set(chall_SOURCES
	cmake.toml
	"src/dummy.cpp"
)

add_executable(chall)

target_sources(chall PRIVATE ${chall_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${chall_SOURCES})

target_link_libraries(chall PRIVATE
	chall-objects
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT chall)
endif()

set(CMKR_TARGET chall)
if(LD_SHUFFLER)
    add_dependencies(chall linker-script)

    target_link_options(chall PRIVATE
        "-Wl,-T,${GENERATED_LINKER_SCRIPT}"
    )
endif()
